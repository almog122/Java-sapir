package queen_lbs;

import java.util.ArrayList;
import java.util.Collections;

public class randomRestartHillClimbing {

	
	char[][] CreateBoard(int boardSize) {
		
		char[][] board = new char[boardSize][boardSize];
		
		int queenLocation , queenNumber , queenRand;

		queenRand = (int) ((Math.random() * boardSize - 1));
		queenNumber = boardSize;
		
		ArrayList<Integer> list = new ArrayList<Integer>(boardSize);
	    for(int i = 0; i < boardSize; i++) {
	         list.add(i);
	    }
	    
	    Collections.shuffle(list);
	    
		for(int i = 0; i < boardSize; i++) {
			
			queenLocation = list.remove(0);
			Collections.shuffle(list);
			
			for(int j = 0; j < boardSize; j++) {
				
				if(queenLocation == j)
					board[i][j] = 'Q';
				else
					board[i][j] = 'X';
				
			}
		}
		
		while(queenNumber > 0) {
			queenLocation = list.remove(0);
			Collections.shuffle(list);
			
			board[queenRand][queenLocation] = 'Q';
			
			queenNumber--;
		}
		
		
		return board;
	}
	
	
	void printBoard(char[][] board) {
		
		for(int i = 0; i < board.length; i++) {
			
			
			for(int j = 0; j < board[i].length; j++) {
				
				System.out.print(board[i][j] + " ");
				
			}
			System.out.println();
		}
	}
	
	int heuristicCost(char[][] board) {
		
		int cost = 0;
		int attFront;
		int attDiagonalLineUp;
		int attDiagonalLineDown;
		
		for(int i = 0; i < board.length; i++) {
			
			for(int j = 0; j < board[i].length; j++) {
				if(board[i][j] == 'Q') {
					attFront = j + 1;
					attDiagonalLineUp = i + 1;
					attDiagonalLineDown = i - 1;
					
					while(attFront < board[i].length) {
						if(board[i][attFront] == 'Q') {
							cost++;
						}
						attFront++;
					}
					
					attFront = j + 1;
					while(attDiagonalLineUp < board.length && attFront < board[i].length) {
						
						if(board[attDiagonalLineUp][attFront] == 'Q') {
							cost++;
						}
						attFront++;
						attDiagonalLineUp++;
					}
					
					attFront = j + 1;
					while(attDiagonalLineDown >= 0 && attFront < board[i].length) {
						if(board[attDiagonalLineDown][attFront] == 'Q') {
							cost++;
						}
						attFront++;
						attDiagonalLineDown--;
					}
				}
				
				
			}
		}
		
		return cost;
		
	}
	
	void HillClimbing(int boardSize , int repeatNum) {
		
		
		
		
		
	}
	
	
	
	
}
